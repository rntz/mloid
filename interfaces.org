TODO: get this file up-to-date

type Id = IR identifiers
type IR = IR expressions

type Conts a b = parser continuations taking a returning b
type Parse a = (ParseEnv, Stream, Conts a b) -> b

* Expressions
type ExprExt { keyword: String, parse: Parse Expr }
type Expr {
  compile: ResolveEnv -> IR
}

* Declarations
type DeclExt { keyword: String, parse: Parse Decl }
type Decl {
  parseExt: ParseEnv
  resolveExt: ResolveEnv
  compile: ResolveEnv -> [(Id, IR)]
}

* Patterns
type PatExt { keyword: String, parse: Parse Pat }
type Pat {
  resolveExt: ResolveEnv
  idents: [Id]
  -- (compile env subject on-success on-failure)
  compile: ResolveEnv, IR, IR, IR -> IR
}
-- Alternatively:
type Pat {
  resolveExt: ResolveEnv
  -- compile env matchCase failCase --> branch
  -- `branch' should bind the ids from `resolveExt' in `matchCase'
  compile: ResolveEnv -> IR -> IR -> IR
}

* Infix operators
type InfixExt {
  symbol: String
  precedence: Int    -- steal haskell's precedences
  associates: 'left | 'right | #f
}
