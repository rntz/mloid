private
  open Lex
  open Parse
  open Ext
in

# Some utility functions
fun first(a,b) = a
fun second(a,b) = b

fun testParse(parser) =
  # env, stream, hardk, softk, ok
  parser(None, None, first, first, second)


# Let's make writing parsers a bit easier, shall we?
# First, a syntax for Parse.pure:
#     @x == Parse.pure(x)
hide val parsePure =
  # unhygienic :(
  let fun f(x) = `e(Parse.pure(~x))
  in map(Quasi.lift(f), expr)

extend Exprs with
  Hash.single(TSYM("@"), parsePure)

# Now a syntax for Parse.map:
#     f@ ~> Parse.lift(f)
#     f@(x,y,z) ~> Parse.lift(f)(x,y,z) = Parse.map(f,x,y,z)
hide fun parseMap(funcExpr) =
  let fun make(f) = `e(Parse.lift(~f))
  in pure(Quasi.map(make, funcExpr))

hide val extMap =
  Hash.put(symbol("precedence"), 11,
    Hash.single(symbol("parse"), parseMap))

extend InfixExprs with
  Hash.single(TSYM("@"), extMap)

# Now Parse.bind:
#     (bind x = expr in xyzzy) = Parse.bind(expr, \(x) xyzzy)
hide val parseBind =
  let fun make(pat, exp, body) = `e(Parse.bind(~exp, \(~pat) ~body))
  # this Quasi.lift(foo)@(...) pattern keeps coming up a lot
  in Quasi.lift(make)@(pat, second@(equals, expr), second@(keyword("in"), expr))

extend Exprs with Hash.single(TID("bind"), parseBind)


# Now we do the same for Quasi, only with ^ instead of @
hide val parseQPure = Quasi.lift(\(x) `e(Quasi.pure(~x)))@(expr)
extend Exprs with Hash.single(TSYM("^"), parseQPure)

hide fun parseQMap(funcExpr) =
  let fun make(f) = `e(Quasi.lift(~f))
  in pure(Quasi.map(make, funcExpr))

extend InfixExprs with
  Hash.single(TSYM("^"),
    Hash.put(symbol("precedence"), 11,
      Hash.single(symbol("parse"), parseQMap)))


# List expressions.
# TODO: list comprehensions?
val parseList =
  let
    fun single(x) = `e(List.list(~x))
    val elem = choice(single^ @(expr), second@(keysym(".."), expr))
    fun make(as) = `e(List.append(~..as))
  in Quasi.lift(make)@(listishQ(elem))

extend Exprs with Hash.single(TLBRACK, first@(parseList, rbrack))


# Hash utilities
# TODO: make this extensible
hide val parseHash =
  let fun lit(x) = ^AST.exprLit(x)
      val field = try(first@(lit@(varId), equals))
      fun muddle(a,b) = `e([[~a, ~b]])
      val elem = muddle^ @(choice(field, first@(expr, colon)), expr)
      fun make(as) = `e(Hash.fromList([~..as]))
  in make^ @(listishQ(elem))

extend Exprs with Hash.single(TLBRACE, first@(parseHash, rbrace))

# Dot syntax for accessing "fields" of hashes
#    a.foo ~> Hash.get(symbol("foo"), a)

hide fun parseHashGet(hashExpr) =
  let fun make(hash, field) = `e(Hash.get(~(AST.exprLit(field)), ~hash))
  in make^ @(@hashExpr, Quasi.pure@(varId))

extend InfixExprs with { TSYM("."): { precedence = 10, parse = parseHashGet } }


# An utterly hackish quote-form for s-expressions.
hide val parseAtom = choice(literal, anyId)

hide
fun parseSexp(env,str,hardk,softk,ok) =
  (choice(Quasi.pure@(parseAtom),
          second@(keysym("~"), unquoExpr),
          Quasi.seq@(parens(many(parseSexp)))))
    (env,str,hardk,softk,ok)

extend QuoteForms with { TID("s"): parseSexp }


# Pattern-matching on lists.
# what a hack.
val nilPat = {
  sexp = \() [],
  resolveExt = {},
  idents = [],
  compile = \(env, subj, onSuc, onFail)
              `s((if (~(symbol("null?")) ~subj) ~onSuc ~onFail))
}

fun consPat(a, b) = {
  sexp = \() `s((cons ~(a.sexp()) ~(b.sexp()))),
  resolveExt = Env.join(a.resolveExt, b.resolveExt),
  idents = List.append(a.idents, b.idents),
  compile = \(env, subj, onSuc, onFail)
              `s((if (~(symbol("pair?")) ~subj)
                    ~(a.compile(env, `s((car ~subj)),
                        b.compile(env, `s((cdr ~subj)), onSuc, onFail),
                        onFail))
                    ~onFail))
}

hide val listPat =
  let fun make(elems, tail) =
        List.foldr(consPat, fromMaybe(tail, nilPat), elems)
  in make^ @(listishQ(pat),
             # FIXME: this allows for two trailing commas!
             bind _ = optional(comma) in
             bind done = option(True, second@(keysym(".."), @False))
             in if done then @ ^None else Just^ @(pat))

extend Pats with {TLBRACK: first@(listPat, rbrack)}
