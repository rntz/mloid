private
  open Lex
  open Parse
  open Ext
  open List
in

# Some utility functions
fun first(a,b) = a
fun second(a,b) = b

fun testParse(parser) =
  # env, stream, hardk, softk, ok
  parser(None, None, first, first, second)

# precedence 12 prohibits all infix operators, even function application
val headExpr = exprAt(12)
val callExpr = exprAt(11) # prohibits all except function application


# Making printed ASTs prettier
fun withSexp(sexpf, exp) = Hash.union(exp, Hash.single(symbol("sexp"), sexpf))


# Let's make writing parsers a bit easier, shall we?
# First, a syntax for Parse.pure:
#     @x == Parse.pure(x)
hide val parsePure =
  # unhygienic :(
  let fun f(x) = `e(Parse.pure(~x))
  in Parse.map(Quasi.lift(f), callExpr)

extend Exprs = Hash.single(TSYM("@"), parsePure)

# Now a syntax for Parse.map:
#     f@ ~> Parse.lift(f)
#     f@(x,y,z) ~> Parse.lift(f)(x,y,z) = Parse.map(f,x,y,z)
hide fun parseMap(funcExpr) =
  let fun make(f) = `e(Parse.lift(~f))
  in pure(Quasi.map(make, funcExpr))

hide val extMap =
  Hash.put(symbol("precedence"), 11,
    Hash.single(symbol("parse"), parseMap))

extend InfixExprs = Hash.single(TSYM("@"), extMap)

# Now Parse.bind:
#     (bind x = expr in xyzzy) = Parse.bind(expr, \(x) xyzzy)
hide val parseBind =
  let fun make(pat, exp, body) = `e(Parse.bind(~exp, \(~pat) ~body))
  # this Quasi.lift(foo)@(...) pattern keeps coming up a lot
  in Quasi.lift(make)@(pat, second@(equals, expr), second@(keyword("in"), expr))

extend Exprs = Hash.single(TID("bind"), parseBind)


# Now we do the same for Quasi, only = ^ instead of @
hide val parseQPure = Quasi.lift(\(x) `e(Quasi.pure(~x)))@(callExpr)
extend Exprs = Hash.single(TSYM("^"), parseQPure)

hide fun parseQMap(funcExpr) =
  let fun make(f) = `e(Quasi.lift(~f))
  in pure(Quasi.map(make, funcExpr))

extend InfixExprs =
  Hash.single(TSYM("^"),
    Hash.put(symbol("precedence"), 11,
      Hash.single(symbol("parse"), parseQMap)))


# List expressions.
hide tag Single(x)
hide tag Splice(x)

# splicedList : [Single Expr | Splice Expr] -> Expr
hide fun splicedList(elems) =
  let fun toPart(Single(e)) = `e(List.list(~e))
        | toPart(Splice(e)) = e
      fun showElem(Single(e)) = sexp(e)
        | showElem(Splice(e)) = list(symbol(".."), sexp(e))
      fun show() = cons(symbol("list"), map(showElem, elems))
  in withSexp(show, `e(List.append(~..(map(toPart, elems)))))

hide fun makeList(es) = splicedList(map(Single, es))

# parseListElem : Parse (Single (Q Expr) | Splice (Q [Expr]))
hide val parseListElem =
  choice(Single @(expr),
         second@(keysym(".."), Splice @(expr)),
         # I don't know why this works.
         second@(keysym("~.."), Splice @(makeList^ @(unquoExpr))))

# TODO: "in" guards, multiple for-loops, etc.
hide fun parseFor(e) =
  let fun make(pat, list, body) = `e(List.map(\ (~pat) ~body, ~list))
  in make^ @(second@(expect(TID("for")), pat),
             second@(expect(TID("in")), expr),
             @e)

# parseList : Parse (Q Expr)
hide val parseList =
  option(^ `e(List.nil),
    bind first = second@(optional(comma), parseListElem) in
    let fun qify(Single(x)) = Single^(x)
          | qify(Splice(x)) = Splice^(x)
        fun fux(rest) = splicedList^(Quasi.seq(List.map(qify,cons(first,rest))))
        val parseRest = fux@(listish(parseListElem))
    in case first
        | Single(e) -> choice(parseFor(e), parseRest)
        | _ -> parseRest)

# hide val parseList = splicedList^ @(Quasi.seq@(listish(parseListElem)))

extend Exprs = Hash.single(TLBRACK, first@(parseList, rbrack))


# An utterly hackish quote-form for s-expressions.
hide val parseAtom = choice(literal, anyId)

hide
fun parseSexp(env,str,hardk,softk,ok) =
  (choice(Quasi.pure@(parseAtom),
          second@(keysym("~"), unquoExpr),
          Quasi.seq@(parens(many(parseSexp)))))
    (env,str,hardk,softk,ok)

extend QuoteForms = Hash.single(TID("s"), parseSexp)


# Creating hashes
hide val parseHash =
  let fun lit(x) = ^AST.exprLit(x)
      val field = try(first@(lit@(varId), equals))
      fun pair(a,b) = `e([~a, ~b])
      val elem = pair^ @(choice(field, first@(expr, colon)), expr)
      fun make(as) = `e(Hash.fromList(~(makeList(as))))
  in make^ @(listishQ(elem))

extend Exprs = Hash.single(TLBRACE, first@(parseHash, rbrace))

# val infixOp

# Dot syntax for accessing "fields" of hashes
#    a.foo ~> Hash.get(symbol("foo"), a)

hide fun parseHashGet(hashExpr) =
  let fun make(hash, field) = `e(Hash.get(~(AST.exprLit(field)), ~hash))
  in make^ @(@hashExpr, Quasi.pure@(varId))

extend InfixExprs = { TSYM("."): { precedence = 10, parse = parseHashGet } }


# Convenience for infix operators
tag L
tag R

fun infix(parseAt) = \(prec,assoc,make)
  { precedence = prec
  , parse = \ (leftExpr)
      make@(@leftExpr, parseAt(prec + (case assoc | R -> 0 | L -> 1))) }

fun exprInfix(prec,assoc,make) = infix(exprAt)(prec,assoc,make^)
fun patInfix(prec,assoc,make) = infix(patAt)(prec,assoc,make^)


# x >> y = bind _ = x in y
extend InfixExprs =
  { TSYM(">>"): exprInfix(1, R, \(l,r) `e(bind _ = ~l in ~r))
  , TSYM("<*"): exprInfix(4, L, \(l,r) `e((\(x,_) x)@(~l, ~r))) }


# Pattern-matching on lists.
# what a hack.
hide val nilPat = {
  sexp = \() [],
  resolveExt = {},
  idents = [],
  compile = \(env, subj, onSuc, onFail)
              `s((if (~(symbol("null?")) ~subj) ~onSuc ~onFail))
}

hide fun consPat(a, b) = {
  sexp = \() `s((cons ~(a.sexp()) ~(b.sexp()))),
  resolveExt = Env.join(a.resolveExt, b.resolveExt),
  idents = List.append(a.idents, b.idents),
  compile = \(env, subj, onSuc, onFail)
              `s((if (~(symbol("pair?")) ~subj)
                    ~(a.compile(env, `s((car ~subj)),
                        b.compile(env, `s((cdr ~subj)), onSuc, onFail),
                        onFail))
                    ~onFail))
}

hide val listPat =
  let fun make(elems, tail) =
        List.foldr(consPat, fromMaybe(tail, nilPat), elems)
  in make^ @(listishQ(pat),
             # FIXME: allows duplicate comma
             option(^None, second@(optional(comma),
               option(^None, second@(keysym(".."), Just^ @(pat))))))

extend Pats = {TLBRACK: first@(listPat, rbrack)}

fun fst([x, .._]) = x
fun snd([_, y, .._]) = y
fun rest([_, ..xs]) = xs


# Dictionary utilies
extend InfixExprs =
  { TID("with"): exprInfix(10, L, \(l,r) `e(Hash.union(~l, ~r))) }


# Parser-specific eta-expansion
# TODO: make non-parser-specific
hide val parseEta =
  let fun make(x) = `e(\(env,str,hardk,softk,ok) ~x(env,str,hardk,softk,ok))
  in make^ @(expr)

extend Exprs = { TID("eta"): parseEta }


# Pattern combinators
hide fun andPat(a, b) = {
  sexp = \ () `s((and ~(a.sexp()) ~(b.sexp()))),
  resolveExt = Env.join(a.resolveExt, b.resolveExt),
  idents = List.append(a.idents, b.idents),
  compile = \(env, subj, onSuc, onFail)
    a.compile(env, subj, b.compile(env, subj, onSuc, onFail), onFail)
}

# for now, we assume pats never bind anything other than normal variables
hide fun patVars(p) = Hash.keys(Env.get(Ext.Vars, p.resolveExt))

# hide fun orPat(a, b) =
#   let val vars = Set.toList(Set.intersect(Set.fromList(patVars(a)),
#                                           Set.fromList(patVars(b))))
#       fun mkVar(name) = [name, {name = name, id = AST.mkId(id), style = 'var}]
#       val vars = List.map(mkVar, vars)
#       val resolveExt = Env.single(Ext.Vars, Hash.fromList(vars))
#       fun sucFor(p) =
#         let val ds = Hash.fromList(
#                        Hash.get(p.resolveExt, name))
#             val d = AST.declBegin(ds)
#         in `e(let ~ds in ~(AST.exprRacket(onSuc)))
#   in {
#     sexp = \ () `s((or ~(a.sexp()) ~(b.sexp()))),
#     idents = List.map(\ ([_,v]) v.id, vars),
#     resolveExt = resolveExt,
#     compile = \(env, subj, onSuc, onFail)
#       a.compile(env, subj, sucFor(a), b.compile(env, subj, sucFor(b), onFail))
#   }

extend InfixPats = { TID("and"): patInfix(3, R, andPat)
                   # , TID("or"): patInfix(2, R, orPat)
                   }
